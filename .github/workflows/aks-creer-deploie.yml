name: configuration et deploie aplication sur aks
on:
  #  push:
    workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: installer Add Docker's official GPG key
      run: |
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update

    - name: installer Docker
      run: sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

#    - name: installer docker
#      uses: crazy-max/ghaction-setup-docker@v3

    - name: installer kubectl
      run: sudo apt-get update && sudo apt-get install -y kubectl

#    - name: installer kubectl
#      uses: azure/setup-kubectl@v3
#      with:
#        version: v1.28.2 # default is latest stable
#      id: install

    - name: installer minikube
      run:  |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube

    - name: demarer minikube
      run: minikube start --driver=docker

    - name: creer namespace argocd
      run: kubectl create namespace argocd

    - name: installe argocd
      run: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: redirection de port
      run: |
        echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
        kubectl patch svc argocd-server -n argocd --type merge --patch "$(cat patch.json)"

    - name: sleep 60s
      run: sleep 60s

    - name: affiche pod
      run: kubectl get pods -n argocd

    - name: affiche svc
      run: kubectl get svc -n argocd

    - name: install cli argocd
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    - name: affiche 1
      run: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo

    - name: affiche3
      run: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

    - name: affiche 2
      run: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

    - name: conexion argocd
      env:
        ip: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
        mdp: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
      run: argocd login $ip --username admin --password $mdp --insecure

#    - name: affiche le mot de passe1
#      run: cat test.txt

#    - name: affiche le mot de passe2
#      run: cat test2.txt
    
#    - name: Se connecter Ã  Argo CD
#      run: |
#        argocd login localhost:8080 --insecure --username admin --password admin

#    - name: argocd new mdp
#      run: argocd account update-password --current-password Z9Zx9cqZw3BfSQ4N --new-password admin
      
    - name: creer application et synchronize automatique a github
      run: |
        kubectl config set-context --current --namespace=argocd
        argocd login --core
        argocd app create evershop --repo https://github.com/MelkiBenjamin/test-deploiement-apli-kubenete-argocd --path evershop --dest-server https://kubernetes.default.svc --dest-namespace default --sync-policy automated --auto-prune
        sleep 120s    
      
    - name: affiche l'url du service
      run: |
        kubectl get service
        minikube service evershop --url      
