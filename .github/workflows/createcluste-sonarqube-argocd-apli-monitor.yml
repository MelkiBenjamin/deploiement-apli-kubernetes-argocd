# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS

on:
  push:
  workflow_dispatch:

#env:
#  AZURE_CONTAINER_REGISTRY: "your-azure-container-registry"
#  CONTAINER_NAME: "your-container-name"
#  RESOURCE_GROUP: "your-resource-group"
#  CLUSTER_NAME: "your-cluster-name"
#  DEPLOYMENT_MANIFEST_PATH: "your-deployment-manifest-path"

jobs:
  createcluster:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/setup-kubectl@v4.0.0      
        id: install

      - name: creation de groupe
        run: az group create --name monResourceGroup22 --location francecentral

      - name: creation de cluster aks
        run: |
          az aks create --resource-group monResourceGroup22 --name monClusterAKS --enable-managed-identity --node-count 1 --generate-ssh-keys --vm-set-type VirtualMachineScaleSets --load-balancer-sku standard --enable-cluster-autoscaler --min-count 1 --max-count 3 --location francecentral

#     - name: creer le cluster aks test
#       uses: actions/aks_create_action@v1
#       with:
#            CLUSTER_NAME: monCluster
#            RESOURCE_GROUP_NAME: monResourceGroup22
#            STORAGE_ACCOUNT_NAME: monstorageaccount
#            STORAGE_CONTlsAINER_NAME: mon storage container
#            STORAGE_ACCESS_KEY: ******
#            ARM_CLIENT_ID: ******
#            ARM_CLIENT_SECRET: ******
#            ARM_SUBSCRIPTION_ID: ********
#            ARM_TENANT_ID: ********

#     - name: connexion au cluster
#       run: az aks get-credentials --resource-group monResourceGroup22 --name monClusterAKS

#      - name: Set up kubelogin for non-interactive login
#        uses: Azure/use-kubelogin@v1.2

#      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
#      - name: Get K8s context
#        uses: Azure/aks-set-context@v4.0.0
#        with:
#          resource-group: monResourceGroup22
#          cluster-name: monClusterAKS
#          admin: 'false'
#          use-kubelogin: 'true'

  sonarqube:
    runs-on: ubuntu-latest
    needs: [createcluster]
    steps:
      - uses: actions/checkout@v4

        # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get K8s context
        uses: Azure/aks-set-context@v4.0.0
        with:
          resource-group: monResourceGroup22
          cluster-name: monClusterAKS

#      - name: conexion au cluster
#        run: az aks get-credentials --resource-group monResourceGroup22 --name monClusterAKS

      - uses: Azure/setup-kubectl@v4.0.0      
        id: install
                
      - name: install helm
        uses: Azure/setup-helm@v4
        id: install-helm

      - name: installer openssl
        run: sudo apt install openssl

      - name: generer certificat
        run: | 
          openssl req -x509 -out localhost.crt -keyout localhost.key \
          -newkey rsa:2048 -nodes -sha256 \
          -subj '/CN=localhost' -extensions EXT -config <( \
          printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

      - name: installer sonarqube avec helm
        run: |
          helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
          helm repo update
          kubectl create namespace sonarqube
          helm upgrade --install -n sonarqube sonarqube sonarqube/sonarqube -f values-sonarqube.yaml

      - name: sonarqube verfication svc
        run: kubectl get pod -n sonarqube
  
#      - name: loadbalancing
#        run: |
#          echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
#          kubectl patch svc sonarqube-sonarqube --type merge --patch "$(cat patch.json)" -n sonarqube
  
      - name: sonarqube attendre
        run: sleep 60
  
      - name: sonarqube verfication
        run: kubectl get svc -n sonarqube

      - name: download cli sonarqube 
        run: |
          curl https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip --output sonar-scanner-cli-5.0.1.3006-linux.zip
        
      - name: unzip cli sonarqube
        run: unzip sonar-scanner-cli-5.0.1.3006-linux.zip

      - name: sonarqube attendre
        run: sleep 240

      - name: sonarqube verfication
        run: kubectl get svc -n sonarqube

      - name: sonarqube connexion
        run: kubectl port-forward svc/sonarqube-sonarqube -n sonarqube --address 0.0.0.0 9000 &
         
      - name: sonarqube token
        run: |
          curl -u admin:${{ secrets.ARGOCD }} -X POST "http://127.0.0.1:9000/api/user_tokens/generate" -d "name=mon_token"

      - name: lance sonarqube
        run: |
          sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner -Dsonar.projectKey=sonarqube -Dsonar.sources=. -Dsonar.host.url=${{ secrets.SONAR_IP }} -Dsonar.login=${{ secrets.SONAR_LOGIN }} -Dsonar.password=${{ secrets.SONAR_PASSWORD }} -X

      - name: Official SonarQube Scan test
        uses: SonarSource/sonarcloud-github-action@master 
        env:
          SONAR_TOKEN: ${{ secrets.T }}
          sonar.projectKey: MelkiBenjamin_deploiement-apli-kubernetes-argocd
          sonar.organization: melkibenjamin

  deploy-argocd:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
#    container:
#        image: mcr.microsoft.com/azure-cli:latest
    needs: [sonarqube]
    steps:
      - uses: actions/checkout@v4
        # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

#      - name: conexion au cluster
#        run: az aks get-credentials --resource-group monResourceGroup22 --name monClusterAKS

      - name: Get K8s context
        uses: Azure/aks-set-context@v4.0.0
        with:
          resource-group: monResourceGroup22
          cluster-name: monClusterAKS

      - uses: Azure/setup-kubectl@v4.0.0      
        id: install
        
      - name: Install cli argocd
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

#      - name: Install ArgoCD
#        run: argocd install --insecure --grpc-web --create-kustomize-namespace
      # Deploys application based on given manifest file

      - name: creer namespace argocd
        run: kubectl create namespace argocd

      - name: Deploys application argocd
        uses: Azure/k8s-deploy@v5.0.0
        with:
          namespace: argocd
          action: deploy
          manifests: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
#          images: |
#             quay.io/argoproj/argocd:v2.10.3

      - name: redirection de port
        run: |
          echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
          kubectl patch svc argocd-server -n argocd --type merge --patch "$(cat patch.json)"
      
      - name: argocd attendre
        run: sleep 60

      - name: argocd verfication
        run: kubectl get svc -n argocd
    
      - name: kubectl get pods
        run: kubectl get pods -n argocd
             
      - name: affiche 2
        run: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

      - name: conexion argocd
        env:
          ip: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          mdp: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        run: argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath='{.status.loadBalancer.ingress[0].ip}') --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --insecure

      - name: Get ArgoCD password
        env:
          ARGOCD: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        run: argocd account update-password --account admin --new-password ${{ secrets.ARGOCD }} --current-password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo)

  deploy-app:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [deploy-argocd]
    steps:
      - uses: actions/checkout@v4
        # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

#      - name: conexion au cluster
#        run: az aks get-credentials --resource-group monResourceGroup22 --name monClusterAKS

      - name: Get K8s context
        uses: Azure/aks-set-context@v4.0.0
        with:
          resource-group: monResourceGroup22
          cluster-name: monClusterAKS

      - uses: Azure/setup-kubectl@v4.0.0      
        id: install
      
      - name: Setup ArgoCD CLI 
        uses: imajeetyadav/argocd-cli@v1

      - name: conexion argocd
        env:
          ip: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          mdp: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        run: argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath='{.status.loadBalancer.ingress[0].ip}') --username admin --password ${{ secrets.ARGOCD }} --insecure 1>/dev/null

      - name: Create ArgoCD Application
        run: |
          kubectl config set-context --current --namespace=argocd
          argocd app create evershop --repo https://github.com/MelkiBenjamin/deploiement-apli-kubernetes-argocd --path evershop --dest-server https://kubernetes.default.svc --dest-namespace default --sync-policy automated --auto-prune

  monitoring:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [createcluster]
    steps:
      - uses: actions/checkout@v4
        # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get K8s context
        uses: Azure/aks-set-context@v4.0.0
        with:
          resource-group: monResourceGroup22
          cluster-name: monClusterAKS

#      - name: conexion au cluster
#        run: az aks get-credentials --resource-group monResourceGroup22 --name monClusterAKS

      - uses: Azure/setup-kubectl@v4.0.0      
        id: install

      - name: install helm
        uses: Azure/setup-helm@v4
        id: install-helm

#      - name: Deploy
#        uses: cloudposse/github-action-deploy-helmfile@main
#        id: deploy
#        with:
#          cluster: monClusterAKS
#          environment: evershop
#          namespace: default
#          image: evershop
#          image-tag: latest
#          operation: deploy
#          debug: false
     
#      - name: packahe helm apli
#        run: helm package evershop

#      - name: install helm apli
#        run: helm install evershop evershop-0.1.0.tgz

      - name: install helm apli monitoring
        run: |
          kubectl create namespace monitoring
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --version 57.0.3 -n monitoring

      - name: attendre
        run: sleep 70

#      - name: redirection de port
#        run: |
#          echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
#          kubectl patch svc my-kube-prometheus-stack-grafana --type merge --patch "$(cat patch.json)" -n monitoring

#      - name: Deploy ArgoCD
#        uses: cloudposse/github-action-deploy-argocd@0.8.1
#        id: deploy
#        with:
#          cluster: https://github.com/cloudposse/argocd-deploy-non-prod-test/blob/main/plat/ue2-sandbox/apps
#          toolchain: helmfile
#          environment: preview
#          namespace: default
#          application: evershop
#          github-pat: evershop
#          repository: https://github.com/MelkiBenjamin/test-deploiement-apli-kubenete-argocd
#          ref: ${{ github.event.pull_request.head.ref  }}
#          image: nginx
#          image-tag: latest
#          operation: deploy
#          debug: false
#          synchronously: true

      