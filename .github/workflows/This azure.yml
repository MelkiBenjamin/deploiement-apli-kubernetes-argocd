# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS

on:
  push:
  workflow_dispatch:

#env:
#  AZURE_CONTAINER_REGISTRY: "your-azure-container-registry"
#  CONTAINER_NAME: "your-container-name"
#  RESOURCE_GROUP: "your-resource-group"
#  CLUSTER_NAME: "your-cluster-name"
#  DEPLOYMENT_MANIFEST_PATH: "your-deployment-manifest-path"


jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    container:
        image: mcr.microsoft.com/azure-cli:latest
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

#      - name: creation de groupe
#        run: az group create --name monResourceGroup --location francecentral
      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
           creds: ${{ secrets.AZURE_CREDENTIALS }}

#      # Builds and pushes an image up to your Azure Container Registry
#      - name: Build and push image to ACR
#        run: |
#          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    container:
        image: mcr.microsoft.com/azure-cli:latest
    needs: [buildImage]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/setup-kubectl@v3
        id: install

      - name: creation de groupe
        run: az group create --name monResourceGroup --location francecentral
    
      - name: creation de cluster aks
        run: az aks create --resource-group monResourceGroup --name monClusterAKS --enable-managed-identity --node-count 1 --generate-ssh-keys 

#      - name: creer le cluster aks
#        uses: actions/aks_create_action@v1
#        with:
#            CLUSTER_NAME: monCluster
#            RESOURCE_GROUP_NAME: monResourceGroup
#            STORAGE_ACCOUNT_NAME: monstorageaccount
#            STORAGE_CONTAINER_NAME: mon storage container
#            STORAGE_ACCESS_KEY: ******
#            ARM_CLIENT_ID: ******
#            ARM_CLIENT_SECRET: ******
#            ARM_SUBSCRIPTION_ID: ********
#            ARM_TENANT_ID: ********

      - name: connexion au cluster
        run: az aks get-credentials --resource-group monResourceGroup --name monClusterAKS

#      # Use kubelogin to configure your kubeconfig for Azure auth
#      - name: Set up kubelogin for non-interactive login
#        uses: azure/use-kubelogin@v1
#        with:
#          kubelogin-version: 'v0.0.25'

#      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
#      - name: Get K8s context
#        uses: azure/aks-set-context@v3
#        with:
#          resource-group: ${{ env.RESOURCE_GROUP }}
#          cluster-name: ${{ env.CLUSTER_NAME }}
#          admin: 'false'
#          use-kubelogin: 'true'

#      - name: Setup ArgoCD CLI 
#        uses: codingprotocols/argocd-cli@v1

      - name: Install cli argocd
        uses: imajeetyadav/argocd-cli@v1

#      - name: Install ArgoCD
#        run: argocd install --insecure --grpc-web --create-kustomize-namespace
      # Deploys application based on given manifest file

      - name: creer namespace argocd
        run: kubectl create namespace argocd

      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/ha/install.yaml
          images: |
             quay.io/argoproj/argocd:v2.10.3

      - name: Get ArgoCD password
        run: argocd account update-password --account admin --password admin

      - name: conexion argocd
        run: argocd login localhost:8080 --insecure --username admin --password admin

      - name: Create ArgoCD Application
        run: |
          kubectl config set-context --current --namespace=argocd
          argocd app create evershop --repo https://github.com/MelkiBenjamin/test-deploiement-apli-kubenete-argocd --path evershop --dest-server https://kubernetes.default.svc --dest-namespace default --sync-policy automated --auto-prune
        
      - name: affiche l'url du service
        run: |
            kubectl get service
            minikube service evershop --url 

            
