name: Build and deploy an app to AKS

on:
  push:
  workflow_dispatch:

env:
    image-order: ${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest
    image-product: ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest
    image-front: ${{ secrets.DOCKERHUB_USERNAME }}/store-front:latest
    nomcluster: nomcluster
    nom-grouperessource: grouperessource
    platforms: linux/amd64
    location: francecentral
    sensible-pas-afficher: 1>/dev/null

permissions:
  pull-requests: read

jobs:
  build3microsercice:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: [${{ env.image-product }}, ${{ env.image-order }}, ${{ env.image-front }}]
        context: [./product-service, ./order-service, ./store-front]
    steps:
      - name: checkout  
        uses: actions/checkout@v4

      - name: Login to docker Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push test
        uses: docker/build-push-action@v5
        with:    
          tags: |
            ${{ matrix.tag }}
          context: ${{ matrix.context }}
          platforms: ${{ env.platforms }}
          push: true
      
  createcluster:
    runs-on: ubuntu-latest
    steps:
      # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: create groupe Azure
        run: az group create --name ${{ env.nom-grouperessource }} --location ${{ env.location }} ${{ env.sensible-pas-afficher }}

      - name: creation cluster aks
        run: |
          az aks create --resource-group ${{ env.nom-grouperessource }} --name ${{ env.nomcluster }} --enable-managed-identity --node-count 1 --generate-ssh-keys --enable-cluster-autoscaler --min-count 1 --max-count 2 --location ${{ env.location }} ${{ env.sensible-pas-afficher }} --node-vm-size Standard_B2s

#     - name: creer le cluster aks test
#       uses: actions/aks_create_action@v1
#       with:
#            CLUSTER_NAME: monCluster
#            RESOURCE_GROUP_NAME: ${{ env.nom-grouperessource }}
#            STORAGE_ACCOUNT_NAME: monstorageaccount
#            STORAGE_CONTAINER_NAME: mon storage container
#            STORAGE_ACCESS_KEY: ******
#            ARM_CLIENT_ID: ******
#            ARM_CLIENT_SECRET: ******
#            ARM_SUBSCRIPTION_ID: ********
#            ARM_TENANT_ID: ********

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - name: checkout   
        uses: actions/checkout@v4

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory 
            -Dsonar.projectKey=MelkiBenjamin_test-sonarqube
            -Dsonar.organization=melkibenjamin
            -Dsonar.sources=. 
            -Dsonar.qualitygate.wait=true
            #-Dsonar.verbose=true 
            # Comma-separated paths to directories containing main source files.
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .

  monitoring:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [createcluster, buildproductservice, buildorderservice, buildstore-front,sonarcloud]
    steps:
        # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get K8s context
        uses: Azure/aks-set-context@v4.0.0
        with:
          resource-group: ${{ env.nom-grouperessource }}
          cluster-name: ${{ env.nomcluster }}

#      - name: conexion au cluster
#        run: az aks get-credentials --resource-group ${{ env.nom-grouperessource }} --name ${{ env.nomcluster }}

      - name: setup kubectl
        uses: Azure/setup-kubectl@v4.0.0      
        id: install

      - name: install helm
        uses: Azure/setup-helm@v4
        id: install-helm

      - name: install helm apli monitoring
        run: |
          kubectl create namespace monitoring
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --version 57.0.3 -n monitoring

#      - name: 'Deploy'
#        uses: 'deliverybot/helm@v1.7'
#        with:
#          release: 'kube-prometheus-stack'
#          namespace: 'monitoring'
#          chart: 'app'

#      - name: redirection de port
#        run: |
#          echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
#          kubectl patch svc my-kube-prometheus-stack-grafana --type merge --patch "$(cat patch.json)" -n monitoring

  argocd:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [createcluster, buildproductservice, buildorderservice, buildstore-front,sonarcloud]
    steps:
      - name: checkout  
        uses: actions/checkout@v4

        # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

#      - name: conexion au cluster
#        run: az aks get-credentials --resource-group ${{ env.nom-grouperessource }} --name ${{ env.nomcluster }}

      - name: Get K8s context
        uses: Azure/aks-set-context@v4.0.0
        with:
          resource-group: ${{ env.nom-grouperessource }}
          cluster-name: ${{ env.nomcluster }}

      - name: setup kubectl   
        uses: Azure/setup-kubectl@v4.0.0      
        id: install
        
      - name: Setup ArgoCD CLI 
        uses: imajeetyadav/argocd-cli@v1

#      - name: Install ArgoCD
#        run: argocd install --insecure --grpc-web --create-kustomize-namespace

      - name: create namespace argocd
        run: kubectl create namespace argocd

      - name: Deploys application argocd
        uses: Azure/k8s-deploy@v5.0.0
        with:
          namespace: argocd
          action: deploy
          manifests: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
#          images: |
#             quay.io/argoproj/argocd:v2.10.3

      - name: redirection de port
        run: |
          echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
          kubectl patch svc argocd-server -n argocd --type merge --patch "$(cat patch.json)"
      
      - name: argocd attendre
        run: sleep 60
             
      - name: connexion argocd
        env:
          ip: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          mdp: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        run: argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath='{.status.loadBalancer.ingress[0].ip}') --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --insecure ${{ env.sensible-pas-afficher }}

      - name: update ArgoCD password
        env:
          ARGOCD: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        run: argocd account update-password --account admin --new-password ${{ secrets.ARGOCD }} --current-password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) ${{ env.sensible-pas-afficher }}

  contoso:
    runs-on: ubuntu-latest
    needs: [argocd]
    steps:
        # Logs in with your Azure credentials
      - name: Azure login
        uses: Azure/login@v2.0.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

#      - name: conexion au cluster
#        run: az aks get-credentials --resource-group ${{ env.nom-grouperessource }} --name ${{ env.nomcluster }}

      - name: Get K8s context
        uses: Azure/aks-set-context@v4.0.0
        with:
          resource-group: ${{ env.nom-grouperessource }}
          cluster-name: ${{ env.nomcluster }}

      - name: setup kubectl   
        uses: Azure/setup-kubectl@v4.0.0      
        id: install
      
      - name: Setup ArgoCD CLI 
        uses: imajeetyadav/argocd-cli@v1

      - name: connexion argocd
        env:
          ip: kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          mdp: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        run: argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath='{.status.loadBalancer.ingress[0].ip}') --username admin --password ${{ secrets.ARGOCD }} --insecure ${{ env.sensible-pas-afficher }}

      - name: Create Application Contoso with Argocd
        run: |
          kubectl create namespace contoso
          kubectl config set-context --current --namespace=argocd
          argocd app create ecommerce --repo https://github.com/MelkiBenjamin/deploiement-apli-kubernetes-argocd --path ecommerce --dest-server https://kubernetes.default.svc --dest-namespace contoso --sync-policy automated --auto-prune

#      - name: Deploy
#        uses: cloudposse/github-action-deploy-argocd@main
#        id: deploy
#        with:
#            cluster: https://github.com/cloudposse/argocd-deploy-non-prod-test/blob/main/plat/ue2-sandbox/apps
#            toolchain: helm
#            namespace: argocd
#            application: ecomerce
#            github-pat: ${{ secrets.GITHUB_AUTH_PAT }}
#            repository: https://github.com/MelkiBenjamin/deploiement-apli-kubernetes-argocd
#            ref: ${{ github.event.pull_request.head.ref  }}
#            image: nginx
#            image-tag: latest
#            operation: deploy
#            debug: false
#            synchronously: true