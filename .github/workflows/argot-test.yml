name: Build

on:
  push:
    branches:
      - main


jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - run: ls
      - name: installer minikube
        run:  |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: demarer minikube
        run: minikube start --driver=docker
        
      - name: install helm
        uses: Azure/setup-helm@v4
        id: install-helm

      - name: insatll helm argocd
        run: |
          kubectl create namespace argocd
          helm repo add argo https://argoproj.github.io/argo-helm
          helm install argocd argo/argo-cd --namespace argocd --version 6.7.3

      - name: install cli argocd
        run: |
          apk add curl
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: redirection de port
        run: |
          echo '{"spec": {"type": "LoadBalancer"}}' > patch.json
          kubectl patch svc argocd-server -n argocd --type merge --patch "$(cat patch.json)"

      # Set ArgoCD server URL
      - name: Set ArgoCD server URL
        id: set_argocd_server
        run: echo "::set-output name=argocd_server::http://your-argocd-url"  # Replace with your ArgoCD server URL

      # Generate temporary password (assuming it's the first deployment)
      - name: Generate temporary ArgoCD password
        id: generate_argocd_password
        run: |
          echo "Temporary password for ArgoCD admin:"
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

      # Set ArgoCD password (temporary, change it later)
      - name: Set ArgoCD password
        id: set_argocd_password
        run: echo "::set-output name=argocd_password::test"

      # Login to ArgoCD
      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ steps.set_argocd_server.outputs.argocd_server }}
          ARGOCD_USERNAME: ${{ steps.set_argocd_username.outputs.argocd_username }}
          ARGOCD_PASSWORD: ${{ steps.generate_argocd_password.outputs.argocd_password }}
        run: argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
